/*****************************************************************************
 * Stacja Pogodowa
 * Skład zespołu:
 * 1) Gabriela Szczuka (234983/251645)
 * 2) Amelka Garnys (251514)
 * 3) Emilia Szczerba (251643)
 * 4) Mikołaj Pawłoś (258681)
 ******************************************************************************/

#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"
#include "lpc17xx_rtc.h"
#include "lpc17xx_i2c.h"

#include "light.h"
#include "oled.h"
#include "temp.h"
#include "acc.h"
#include "joystick.h"
#include "pca9532.h"

#include "./myRtc.h"
#include "./ledStrips.h"

static uint32_t msTicks = 0;
static uint8_t buf[10];

#define LM75_I2C_ADDR (0x4D)

void SysTick_Handler(void) {
	msTicks++;
}

static uint32_t getTicks(void) {
	return msTicks;
}

static void init_ssp(void) {
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);
}
static int I2CRead(uint8_t addr, uint8_t* buf, uint32_t len)
{
	I2C_M_SETUP_Type rxsetup;

	rxsetup.sl_addr7bit = addr;
	rxsetup.tx_data = NULL;	// Get address to read at writing address
	rxsetup.tx_length = 0;
	rxsetup.rx_data = buf;
	rxsetup.rx_length = len;
	rxsetup.retransmissions_max = 3;

	if (I2C_MasterTransferData(I2CDEV, &rxsetup, I2C_TRANSFER_POLLING) == SUCCESS){
		return (0);
	} else {
		return (-1);
	}
}

void lm75_read (void) {
    uint8_t buf[2];
    buf[0] = 0;
    buf[1] = 0;
    I2CRead(LM75_I2C_ADDR, buf, 2);

    printf("%d",buf[0]);
}



int main(void) {
	LED_STRIP_CONF ledStrip;
	ledStrip.dir = 0;
	ledStrip.cnt = 0;
	ledStrip.ledOn = 0;
	ledStrip.ledOff = 0;


	RTC_TIME_Type time2;
	time2.SEC = 0;
	time2.MIN = 00;
	time2.HOUR = 00;

	init_ssp();
	joystick_init();
	rtc_init();
	rtc_set_time();

	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);
	I2C_Init(LPC_I2C2, 100000);
	I2C_Cmd(LPC_I2C2, ENABLE);
	pca9532_init();

	oled_init();
	light_enable();
	light_setRange(LIGHT_RANGE_4000);
	oled_clearScreen(OLED_COLOR_WHITE);
	oled_putString(1, 1, (uint8_t*) "Temp   : ", OLED_COLOR_BLACK,
			OLED_COLOR_WHITE);

	temp_init(&getTicks);

	if (SysTick_Config(SystemCoreClock / 1000)) {
		while (1)
			;  // Capture error
	}

	int32_t temperature = 0;
	RTC_TIME_Type time;
	lm75_read();
	while (1) {

		/*get temperature multiplied by 10 */
		temperature = temp_read();

		/* output values to OLED display */
		sprintf(buf, "%02d.%d C", temperature / 10, temperature % 10);
		oled_putString((1 + 9 * 6), 1, buf, OLED_COLOR_BLACK, OLED_COLOR_WHITE);

		rtc_get_time(&time);

		sprintf(buf, "%02d:%02d:%02d", time.HOUR, time.MIN, time.SEC);
		oled_putString(1, 10, buf, OLED_COLOR_BLACK, OLED_COLOR_WHITE);

		sprintf(buf, "%02d/%02d/%04d", time.DOM, time.MONTH, time.YEAR);
		oled_putString(1, 19, buf, OLED_COLOR_BLACK, OLED_COLOR_WHITE);

		oled_putString(1, 28, (uint8_t*) "Timer   : ", OLED_COLOR_BLACK,
				OLED_COLOR_WHITE);
		sprintf(buf, "%02d:%02d:%02d", time2.HOUR, time2.MIN, time2.SEC);
		oled_putString(1, 36, buf, OLED_COLOR_BLACK, OLED_COLOR_WHITE);

		manageLedStrips(&ledStrip);

		/* delay */
		Timer0_Wait(200);
	}

}




void check_failed(uint8_t *file, uint32_t line) {
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while (1)
		;
}
